{"version":3,"sources":["routes/About.js","components/Movie.js","routes/Home.js","routes/Detail.js","components/Navigation.js","App.js","index.js"],"names":["About","props","console","log","className","Movie","id","title","year","rating","genres","synopsis","poster","to","pathname","state","class","src","alt","map","genre","index","slice","prototype","PropTypes","number","isRequired","string","arrayOf","Home","isLoading","movies","getMovies","a","axios","get","data","setState","this","movie","medium_cover_image","React","Component","Detail","location","history","undefined","push","Navigation","App","path","exact","component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.464ddbe2.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./reset.css\";\r\nimport \"./About.css\";\r\n\r\nfunction About(props){\r\n    console.log(props);\r\n    return (\r\n    <div className=\"about__container\">\r\n        <span>\r\n            “Freedom is the freedom to say that two plus two make four. If that is\r\n            granted, all else follows.”\r\n        </span>\r\n        <span>− George Orwell, 1984</span>\r\n    </div>\r\n    );\r\n}\r\n\r\n\r\nexport default About;","import React from \"react\";\r\nimport {Link } from \"react-router-dom\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"./reset.css\";\r\nimport \"./Movie.css\";\r\n\r\nfunction Movie({id,title,year,rating,genres,synopsis,poster}){\r\n    return (\r\n        <Link to={{\r\n            pathname:`/movie/${id}`,\r\n            state:{\r\n                title,\r\n                year,\r\n                poster,\r\n                genres,\r\n                rating,\r\n                synopsis\r\n            }\r\n        }}>\r\n            <div class=\"movie\">\r\n                <img src={poster} alt={title} title={title}></img>\r\n                <div class=\"movie_info\">\r\n                    <div class=\"movie_title_year\">\r\n                        <div class=\"movie_title\">{title}</div>\r\n                        <div class=\"movie_year\">{year}</div>\r\n                    </div>\r\n                    <ul class=\"movie-geners\">\r\n                        {genres.map((genre,index) => (\r\n                            <li key={index} class=\"movie-geners-gener\">{genre}</li>\r\n                        ))}\r\n                    </ul>\r\n                    <div class=\"movie-rating\">{rating} / 10.0</div>\r\n                    <p class=\"movie_summery\">{synopsis.slice(0,180)}</p>\r\n                </div>\r\n            </div>\r\n        </Link>\r\n    );\r\n}\r\n\r\nMovie.prototype={\r\n    id:PropTypes.number.isRequired,\r\n    title:PropTypes.string.isRequired,\r\n    year:PropTypes.number.isRequired,\r\n    rating:PropTypes.number.isRequired,\r\n    genre:PropTypes.arrayOf(PropTypes.string).isRequired,\r\n    synopsis:PropTypes.string.isRequired,\r\n    poster:PropTypes.string.isRequired,\r\n}\r\nexport default Movie;","\r\nimport React from \"react\";\r\nimport axios from \"axios\";\r\nimport Movie from \"../components/Movie\";\r\nimport \"./reset.css\";\r\nimport \"./Home.css\";\r\n\r\n//import PropTypes from \"prop-types\";\r\n//import Test from './test';\r\n\r\n/*\r\nfunction Food({name,num,rating}) {\r\n  console.log();\r\n  return <div>\r\n    <h2>I like {name}</h2>\r\n    <h3>It is {num}</h3>\r\n    <h4>{rating}/5.0</h4>\r\n    </div>\r\n}\r\n\r\nFood.propTypes={\r\n  name:PropTypes.string.isRequired,\r\n  num:PropTypes.string.isRequired,\r\n  rating:PropTypes.number.isRequired\r\n}\r\n\r\n//porpTypes를 통해서 react magic에서 가져오는 props들을 검사할 수 있다.\r\n//property의 존재의 유무, property의 type의 검사등 props를 검사하는 것이다.\r\n/*\r\n  1. terminal -> npm i prop-types (install)\r\n  2. import PropTypes from \"porp-types\";\r\n  3. render function.propTypes={\r\n    property:PropTypes.type.isRequired\r\n  }\r\n*/\r\n\r\n/*\r\nconst foodILike=[\r\n  {id:1,name:\"kimchi\",num:\"first\",rating:4.5},\r\n  {id:2,name:\"rameun\",num:\"second\",rating:3.7},\r\n  {id:3,name:\"kimbab\",num:\"third\",rating:3.1},\r\n  {id:4,name:\"drink\",num:\"fourth\",rating:2.8},\r\n  {id:5,name:\"dongasu\",num:\"fifth\",rating:2.4}\r\n]\r\n*/\r\n\r\n/*\r\n//function component를 사용하는 방법\r\nfunction App() {      //component == html을 반환하는 function\r\n  return (\r\n    <div className=\"App\">\r\n      <h1>hello</h1>\r\n      {foodILike.map(function(dish){\r\n        return <Food key={dish.id} name={dish.name} num={dish.num} rating={dish.rating}/>\r\n      })}\r\n    </div>\r\n  );\r\n}       //function App은 html 을 반환하는 function이다\r\n*/\r\n\r\n\r\n/*\r\n//function component를 사용하는 방법이 아닌 state를 사용하기 위해 App class 생성\r\nclass App extends React.Component{\r\n  state={\r\n     count:0\r\n  };\r\n  add=()=>{\r\n    console.log(\"add\");\r\n    this.setState(current => ({count: current.count+1}));\r\n  };\r\n  minus=()=>{\r\n    console.log(\"minus\");\r\n    this.setState(current => ({count: current.count-1}));\r\n  };\r\n  render (){\r\n    return ( \r\n    <div>\r\n      <h1>I am class component</h1>\r\n      <h2>The count: {this.state.count}</h2>\r\n      <button onClick={this.add}>ADD</button>\r\n      <button onClick={this.minus}>MINUS</button>\r\n    </div>\r\n    );\r\n  }\r\n}\r\n*/\r\n\r\n/*\r\nApp class는 React.Component클래스에서 상속받는다.\r\nApp class는 함수가 아님으로 return할수 없다. 하지만 React.Component에 render메서드를 사용해서\r\n멤버 메서드로 가져온다음 render안에서 return 함으로서 실행할 수 있다.\r\n*/\r\n\r\n/*\r\nfunction componemt 대신 class component를 사용하는 이유!!\r\n우리가 사용하는 데이터가 동적으로 변화할때(API, server에서 data를 가져오는 경우...)\r\n우리는 object인 state를 사용하여 data를 state안에 저장해서\r\ndata를 사용하고 관리한다.\r\n이때 우리는 class compnent를 사용함으로 클래스 문법에 맞게 사용해야한다.\r\n(Java의 클래스 문법을 생각하면 이해가 쉽다.)\r\n*/\r\n\r\n/*\r\n궁극적으로 class component를 사용하는 목적인 state에 담긴 data의 변화이다.\r\n그러면 어떻게 data를 변화(조작)할 수 있는가??\r\n단순히 class문법인 this.state.count를 사용한다라고 생각 할 수 있다.\r\n하지만 이러한 경우 react는 변화한 state의 data값을 render할 수 없다.\r\n즉 우리는 state의 data값을 변화시킨다음 그것을 다시 render함으로서 보여야하는데\r\n이때 state를 직접적으로 사용한다면 react는 render를 refresh하지 않음으로 data의 변화를\r\n보이지 않는다. 따라서 우리는 setState를 사용해서 state의 data를 변화해야 한다.\r\n이때 setState에서 data를 변화할때 this.state.count처럼 사용하는 것이 아닌 current를 \r\n사용해서 state에 종속적이지 않고 사용할 수 있다.\r\n*/\r\n\r\n/*\r\ncomponent life cycle\r\nclass component임으로 생성과 종료의 cycle을 가지고 있다. \r\n크게 3가지로서 Mounting-Update-Unmounting이다 \r\n\r\n1. Mounting\r\nconstructor()->>생성자\r\nrender()\r\ncomponentDidMount() ->> render()후 component가 render되었음을 알림\r\n\r\n2. Update\r\nUpdate의 원인은 사용자이다(ex. state의 변화...)\r\nrender()\r\ncomponentDidUpdate() ->> render()이후 Update가 완료되었을때 componentDidUpdate가 실행된다\r\n\r\n3. Unmounting\r\ncomponentWillUnmount() ->> component가 종료될때 실행된다(page refresh,page close...).\r\nc++에서 소멸자와 비슷한 개념이다.\r\n*/\r\n\r\n\r\nclass Home extends React.Component{\r\n\r\n  state={\r\n    isLoading: true,   \r\n    movies:[]\r\n  };\r\n\r\n  /*\r\n  componentDidMount(){\r\n    setTimeout( () => { this.setState( { isLoading : false } ); },6000);   //setState을 작성할때 state에 반드시 default값을 작성하지 않아도 된다\r\n  };\r\n  */\r\n  \r\n  getMovies= async ()=>{\r\n    const {data:{data:{movies}}} = await axios.get(\"https://yts-proxy.now.sh/list_movies.json?sort_by=rating\");\r\n    this.setState({movies, isLoading:false});\r\n  }\r\n  //API에서 data를 가져온다. 이때 data를 모두 가져올때 까지 비동기로 지정하고 기다리게 해준다.\r\n  //이때 사용되는 것이 async & await이다.\r\n\r\n  componentDidMount(){\r\n    this.getMovies();\r\n  }\r\n\r\n  render(){\r\n    const {isLoading, movies}=this.state;\r\n    return (\r\n      <section class=\"container\">\r\n      {isLoading ? (\r\n          <div class=\"loader\">\r\n            <div class=\"loader-text\">Now Loading...</div>\r\n          </div>\r\n        ) : (\r\n          <div class=\"movies\">\r\n            {\r\n              movies.map(movie => (\r\n                <Movie key={movie.id} id={movie.id} title={movie.title} year={movie.year} rating={movie.rating} genres={movie.genres} synopsis={movie.synopsis} poster={movie.medium_cover_image} />\r\n              ))\r\n            }\r\n          </div> )\r\n        }\r\n      </section>\r\n    );\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\nexport default Home;\r\n\r\n//line 10 ->> <Test />\r\n\r\n/*application안에 많은 component를 포함할수 있고 이러한 component안에 다 많은\r\ncomponent를 import 할수 있다\r\n*/\r\n\r\n/*\r\n<Food fav  =\"kimchi\" someting={true} apapapp={[\"hello\",1,2,3,4,false]}/>\r\n\r\nFood라는 component에 fav라는 이름의 property(prop)를 \"kimchi\"라는 value로 준것이다\r\nporp의 value값으로는 다양한 것을 줄 수 있다.\r\n또한 react magic은 이러한 props를 가져가는 약할을 한다.\r\nFood component로 정보를 보내고자 하면 react는 모든 props(속성)을 Food component의 argument로\r\nprops를 전달해준다.\r\n이떄 argument로 전달하는 props는 js의 event 또는 python의 self같은 형식이다.\r\n따라서 argument를 조작해서 개별 property를 가져올수도 있다.\r\nlike Food({fav}) 라면 porps중에서 fav property를 가져오는 뜻이다.(props.fav=={fav})\r\n*/\r\n\r\n\r\n/*\r\n{foodILike.map(function(dish){\r\n  return <Food key={dish.id} name={dish.name} num={dish.num}/>\r\n})}\r\n\r\nfoodILike list를 map메서드로 인자 하나씩 받아서 function(dish)에 넣어서 return 해주는 코드이다.\r\n이때 dish는 foodILike에 인자 하니씩 받음으로 dish에는 component가 2개가 존재한다.\r\n따라서 dish.*를 통해 각각의 component를 조작할 수 있고 이것으 Food함수를 return 해줌으로서\r\n위의 code처럼 property를 조작할 수 있게 한다.\r\n또한 react는 그리 똑똑하지 않아서 react 내부적으로 구분할 수 있게\r\nlist에 각각의 요소는 유일해야 한다. 따라서 id값 같은 것을 통해 유일한 key를 가질 수 있게 한다.\r\n*/\r\n","import React from \"react\";\r\n\r\n\r\nclass Detail extends React.Component{\r\n    componentDidMount(){\r\n        const {location, history}=this.props;\r\n        if(location.state===undefined){\r\n            history.push(\"/\");\r\n        }\r\n    }\r\n    render(){\r\n        const{location}=this.props;\r\n        if(location.state){\r\n            return <sapn>{location.state.title}</sapn>;\r\n        }\r\n        else{\r\n            return null;\r\n        }\r\n    }\r\n}\r\n\r\nexport default Detail;","import React from \"react\";\r\nimport {Link} from \"react-router-dom\";\r\nimport \"./reset.css\";\r\nimport \"./Navigation.css\";\r\n\r\nfunction Navigation(){\r\n    return <div class=\"nav\">\r\n    <Link to=\"/\">Home</Link>\r\n    <Link to=\"/about\">About</Link>\r\n  </div>\r\n}\r\n\r\nexport default Navigation;","\nimport React from \"react\";\nimport {HashRouter, Route} from \"react-router-dom\";\nimport About from \"./routes/About\";\nimport Home from \"./routes/Home\";\nimport Detail from \"./routes/Detail\";\nimport Navigation from \"./components/Navigation\";\nimport \"./reset.css\";\nimport \"./App.css\";\n\nfunction App(){\n  return <HashRouter>\n    <Navigation/>\n    <Route path=\"/\" exact={true} component={Home} />\n    <Route path=\"/about\" component={About} />\n    <Route path=\"/movie/:id\" component={Detail} />\n  </HashRouter>\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\n\n\nReactDOM.render(            //component를 사용하고자 할때 사용하는 compotnent의 형태이다\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n//react는 component를 사용해서 html처럼 작성하려는 경우에 필요하다\n//위와같은 js와 html의 조합을 jsx라 부른다\n/*\nreact application은 한번에 하나의 component만 rendering할 수 있다\n따라서 모든 것은 application에 들어가야 한다.\n*/"],"sourceRoot":""}